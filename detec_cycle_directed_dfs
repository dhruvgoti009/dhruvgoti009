
// Author : Dhruv Goti.... 
// From   : Daiict.....






#include <bits/stdc++.h>

using namespace std;
#define ll long long int
#define all(a) (a).begin(),(a).end()
#define endl '\n'

void TOS()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); 
    #ifndef ONLINE_JUDGE 
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
}

//for string 
vector<string> vec_splitter(string s) {
   s += ',';
   vector<string> res;
   while(!s.empty()) {
      res.push_back(s.substr(0, s.find(',')));
      s = s.substr(s.find(',') + 1);
   }
   return res;
}

//for variable
void debug_out(
vector<string> __attribute__ ((unused)) args,
__attribute__ ((unused)) int idx, 
__attribute__ ((unused)) int LINE_NUM) { cerr << endl; } 
template <typename Head, typename... Tail>
void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T) {
   if(idx > 0) cerr << ", "; else cerr << "Line(" << LINE_NUM << ") ";
   stringstream ss; ss << H;
   cerr << args[idx] << " = " << ss.str();
   debug_out(args, idx + 1, LINE_NUM, T...);
}


// for vector set 
template<typename C, 
         typename T = std::decay_t<decltype(*begin(std::declval<C>()))>,
         typename std::enable_if<!std::is_same<C, std::string>::value>::type* = nullptr
         >
std::ostream &operator<<(std::ostream &os, const C &container){
  bool first = true;
  std::stringstream ss; 
  ss << '[';
  for(const auto &x : container){
    if (!first){
      ss << ", ";
    }
    first = false;
    ss << x;
  }
  ss << ']';
  return os << ss.str();
}


// for map
template<class T1, class T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1,T2> &p){
  os << '{' << p.first << ", " << p.second << '}';
  return os;
}

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
 
int getRand(int l, int r)
{
   uniform_int_distribution<int> uid(l, r);
   return uid(rng);
}

#define DXOX
#ifdef DXOX
#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)
#else
#define debug(...) 42
#endif

vector<ll> v[100010];
ll visited[100010];
ll dis[100010];

bool dfs(ll value)
{
   visited[value]=1;
   for(auto child:v[value])
   {
      if(!visited[child])
      {
         if(dfs(child)) return true;
      }
      else
      {
         if(visited[child] == 1) return true;
      }
   }
   visited[value]=2;
   return false;
}


void solve()
{
   ll  n,m;
   cin >> n >> m;
   for(ll i=0;i<m;i++)
   {
      ll a,b;
      cin >> a >> b;
      v[a].push_back(b);
      // v[b].push_back(a);
   }

   if(dfs(1)) cout<<"CYCLE"<<endl;
   else cout<<"NOT CYCLE"<<endl;

   

}

int main()
{
    TOS();
    ll qq_itr=1;
    // cin >> qq_itr;
    while (qq_itr--)
        solve();
}  
